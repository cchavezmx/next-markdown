---
title: 'Javascript Clase 01 - Introducci√≥n'
metaTitle: 'introducci√≥n a javascript - clase 01'
metaDesc: 'historia de javascript, tipos e integracion'
author: 'cchavezmx'
date: '2022-06-20'
tags:
  - nextjs
---

## Bienvenido a Javascript, el lenguaje de programaci√≥n m√°s utilizado en la web

## Temario: {#temario}

  - [¬øQu√© es Javascript?](#que-es-javascript)
  - [¬øPara que sirve Javascript?](#como-funciona)
  - [Preparando el terreno](#preparando-el-terreno)
    - [Glosario de conceptos](#glosario-de-conceptos)
  - [ECMAScript](#ecmascript)
  - [Conceptos B√°sicos](#conceptos-basicos)
  - [Fundamentos de Javascript](#fundamentos-de-javascript)
    - [Utilizando typeof()](#utilizando-typeof)
    - [Declarando variables](#declarando-variables)
  - [Tipo de dato primitivo numerica](#tipo-de-dato-primitivo-numerica)
  - [Booleano](#booleano)
  - [String](#string)
     - [String.length](#string-length)
     - [String.split](#string-split)
     - [String.lastIndexOf](#array-lastindexof)
  - [Comentarios Finales](#comentarios)
  
    
* * *

## ¬øQu√© es Javascript? {#que-es-javascript}

Javascript se ha convertido en el lenguaje de programaci√≥n m√°s utilizado en la web por excelencia. es el lenguaje de programaci√≥n que entieden los exploradores web y aunque existan otras tecnolog√≠as como Java, Python, C#, etc para el desarrollo de aplicaciones web, al final todos estos tienen que cambiarse a Javascript para que sea entendido por los navegadores.

Javascript al combinarse con HTML y CSS nos permite crear p√°ginas web din√°micas e interactivas. mas adelante vamos a aprender como interactuar con los archivos de css y html que vamos creando en nuestra p√°gina y entender el funcionamiento del lenguaje al combinarse con el html y css.

Cosas basicas de javascript:

 - Es un lenguaje de debil tipado, es decir que no es necesario definir el tipo de dato que se va a utilizar en una variable.
 - Es un lenguaje de programaci√≥n dinamica, es decir que se puede modificar el valor de una variable en tiempo de ejecuci√≥n.
 - Es un lenguaje de programaci√≥n orientada a objetos, es decir que se puede crear objetos y utilizarlos en tiempo de ejecuci√≥n.
 - No debemos confundir con JAVA
 
Antes de comenzar vamos a aprender los conceptos b√°sicos de javascript. VAMOS A ELLO!!! üí™üí™üí™üí™

* * *

## ¬øPara que sirve Javascript? {#como-funciona}

Antes que nada vamos a recordar una estructura b√°sica de html, para esto te invito a copiar el siguiente c√≥digo:

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Document</title>
</head>
<body>
  <div class="item">
    <p>N√∫mero: <span class="numero">1</span></p>
    <p>N√∫mero: <span class="numero">2</span></p>
    <p>N√∫mero: <span class="numero">3</span></p>
    <p>N√∫mero: <span class="numero">4</span></p>
    <p>N√∫mero: <span class="numero">5</span></p>
  </div>
</body>
</html>

```

üßê __Inpector de c√≥digo__ üßê
¬øQue vemos aqui? ü§î
Dede arriba: tenemos el tag `<!DOCTYPE html>` que es una declaraci√≥n de tipo de documento. este tag es importante para que el navegador entienda que es un documento html.

- El tag `<html lang="en">` que es una declaraci√≥n de idioma. ‚è∞ el `en` dentro del `lang="`
este atributo sirve para defirnir el idioma que se va a utilizar en la p√°gina.


- El tag `<head>` es una secci√≥n de la p√°gina que contiene los metatags y los scripts que se van a utilizar en la p√°gina.

- El tag `<meta charset="UTF-8">` es una declaraci√≥n de la codificaci√≥n. Como el internet es unviersal nuesta p√°gina puede ser visitada desde otro pais que no necesariamente usan las mismas letras que nosotros, de esta forma la computadora sabe que letras usar para interpretar la informaci√≥n.


- El tag `<meta name="viewport" content="width=device-width, initial-scale=1.0">` nos ayuda a definir el tama√±o de la ventana de la p√°gina y el zoom que se va a utilizar.

- El tag `<meta http-equiv="X-UA-Compatible" content="ie=edge">` es una declaraci√≥n de compatibilidad con navegadores.

- El tag `<title>Document</title>` configura el t√≠tulo de la p√°gina. este tag es muy importante para que los buscadores (google, Bing, etc) entiendan que es una p√°gina de una web y tenga una idea de que se trata.

- El tag `<body>` es el bloque de la p√°gina que contiene el c√≥digo html, todo nuestro sitio va dentro de este bloque de c√≥digo.
y es dentro de este bloque de codigo que tenemos otro bloque de c√≥digo que es el `<div class="item">` es contiene una lista de numeros.

```html
    <p>N√∫mero: <span class="numero">1</span></p>
    <p>N√∫mero: <span class="numero">2</span></p>
    <p>N√∫mero: <span class="numero">3</span></p>
    <p>N√∫mero: <span class="numero">4</span></p>
    <p>N√∫mero: <span class="numero">5</span></p>
```

üìå __Nota:__ un bloque de codigo se define con el nombre del tag que estamos usando, de preferencia, un`<div>` o `<section>` o `<article>` o `<main>` estos deben estar dentro de un `<body>`. para terminar de definir el bloque de codigo, debemos cerrar el tag que estamos usando anteponiendo un `/` y al final el nombre del tag. por ejemplo: `</div>` o `</section>` o `</article>` o `</main>`
es por esto que tambien reciben el nombre de contenedor.


üìå __Nota:__ el bloque `<body>` es el m√°s importante porque es el que contiene todo el c√≥digo html, y es donde vamos a definir nuestro nuevo bloque de c√≥digo `<scrip>` aqui definiremos el c√≥digo javascript que vamos a utilizar en nuestra p√°gina.

Ya que recordamos un poco de los conceptos de la sintaxis de una p√°gina html, hay que entender para que vamos o tenemos que aprender javascript. recuerdas la lista de numeros del ejemplo anterior? pues imagina que en lugar de 5 numeros, vamos a tener una lista de 10 numeros o de 500 o de 1000 numeros. tendriamos que escribir linea por linea el c√≥digo html para que el navegador entienda que es una lista de numeros. y si esta lista cambia constantemente, esta es la importancia de javascript y en general de los lenguajes de programaci√≥n para poder hacer tareas repetitivas, para hacer mas eficientes las tareas que se realizan en nuestra p√°gina.

Antes de comenzar a aprender javascript, tenemos que endender algunos conceptos basicos de javascript.

Aunque Javascript es ideal para muchos casos, es mucho m√°s complicado aprender Javascript (o un lenguaje de programaci√≥n en general) que aprender HTML o CSS, los cuales son mucho m√°s sencillos de comprender. Antes debemos conocer varias cosas:

Para aprender Javascript debemos conocer el lenguaje Javascript, pero no podremos hacerlo si no sabemos programar. Se puede aprender a programar con Javascript, pero es recomendable tener una serie de fundamentos b√°sicos de programaci√≥n antes para que no nos resulte muy duro.

Para aprender a programar antes debemos saber como ¬´trabaja una computadora. Programar no es m√°s que decirle a una m√°quina que cosas debe hacer y como debe hacerlas. Eso significa que no podemos pasar por alto nada.

Para darle √≥rdenes a una m√°quina debemos tener claro que esas √≥rdenes son correctas y har√°n lo que se supone que deben hacer. Si le indicamos a una m√°quina los pasos para resolver un problema, pero dichos pasos son err√≥neos, la m√°quina tambi√©n har√° mal el trabajo.

Dicho esto, es necesario tener presente que aprender a programar es una tarea que no ocurre de un d√≠a para otro. Requiere tiempo, esfuerzo, acostumbrarse a cambiar la forma de pensar y practicar mucho.

Puedes copiar un programa en segundos, pero eso no significa que lo entiendas.

Puedes comprender un programa en minutos, pero eso no significa que lo puedas crear.

Puedes crear un programa en horas, pero eso no significa que sepas programar.

Puedes aprender a programar en semanas, pero eso no significa que no cometas errores.

Puedes aprender a programar bien y sin demasiados errores en meses.

Pero dominar la programaci√≥n es una tarea que requiere a√±os.

recuerda hay que practicar, y tener paciencia para aprender.

* * * 


## Preparando el terreno {#preparando-el-terreno}

Existen 3 herramientas que nos permiten interactuar con javascript: nodejs, un navegador web o un playground de javascript.
para seguir aprendiendo javascript vamos a instalar RunJS, RunJs es un playground que nos permite ejecutar codigo javascript de forma sencilla.

puedes descargarlo para windows 10 desde [aqui](https://github.com/lukehaas/RunJS/releases/download/v2.4.1/RunJS-Setup-2.4.1.exe).
este programa es de pago pero cuenta con una versi√≥n gratuita.

Descarga el programa e instala en tu computador.

despues de instalarlo, te aperecera una ventanan como esta: 

![runjs](/images/02/runjs.png)


simplmente nos da la bienvenida a RunJS, RunJS cuenta con una ventana partida en dos partes, del lado izquierdo esta el editor de codigo, aqui vamos a poner nuestro codigo, y el lado derecho esta el resultado de ejecutar nuestro codigo.


üìå __Nota:__ para agrandar el tama√±o de letra sigue el siguiente men√∫: 
![letra01](/images/02/cambiar_tamano_menu.png)
![letra02](/images/02/cambiar_tamano_menu_02.png)


ya que tenemos todo instalado prueba lo siguiente: en el lado izquierdo del editor de codigo escribe 

``` javascript
 console.log("Hola mundo");
```
y revisa que pasa del lado derecho del RunJS:

üî•üî•üî•üî• Bien hecho, si todo bien hasta aqui vamos empezar con los conceptos b√°sicos. üî•üî•üî•üî•

> üß† __Para saber m√°s:__ Antes que nada, quiero que sepas que lo que vamos a ver acontinuaci√≥n son conceptos que se aplican para otros lenguajes de programacion.

Te invitamos a que cada uno de los comandos que presentamos a continuacion los escribas y practiques en en RunJS

 - ### console.log()

el `console.log()` es una funcion que nos permite imprimir un mensaje en la consola, OJO esto solo sirve para imprimir mensajes en la consola, no tiene ningun efecto en la p√°gina web.

pero no existe solo el `console.log()`, tambien existen mas variantes de `console.log()`:

| Funcion           | Descripci√≥n                                                                       |
|-------------------|-----------------------------------------------------------------------------------|
| console.log()     | Muestra la informaci√≥n proporcionada en la consola Javascript.                    |
| console.info()	  | Equivalente al anterior. Se utiliza para mensajes de informaci√≥n.                 |
| console.warn()    | Muestra informaci√≥n de advertencia. Aparece en amarillo.                          |
| console.error()   | Muestra informaci√≥n de error. Aparece en rojo.                                    |
| console.clear()   | Limpia la consola. Equivalente a pulsar CTRL+L o escribir clear().                |


### Glosario de conceptos:  {#glosario-de-conceptos}

A lo largo del curso vamos a usar algunos conceptos que puede ser que no estes familiarizado: estos son algunos de los conceptos que vamos a usar:

- __Programa:__ En programaci√≥n se suele llamar ¬´programa¬ª a el conjunto total de c√≥digo que desarrollas. En Javascript, quiz√°s el t√©rmino m√°s utilizado es aplicaci√≥n web (cuando es un desarrollo con mucha cantidad de Javascript). Tambi√©n se suelen generalizar utilizando t√©rminos como ¬´script¬ª o ¬´c√≥digo Javascript¬ª.

- __Algoritmo:__ Un algoritmo es un conjunto de pasos conocidos, en un determinado orden, para conseguir realizar una tarea satisfactoriamente y lograr un objetivo.

- __Comentarios:__ Los comentarios en nuestro c√≥digo son fragmentos de texto o anotaciones que el navegador ignora y no repercuten en el programa. Sirven para dejar por escrito detalles importantes para el programador. De esta forma cuando volvamos al c√≥digo, nos ser√° m√°s r√°pido comprenderlo. Es una buena costumbre comentar en la medida de lo posible nuestro c√≥digo.

- __Indentaci√≥n:__ Se llama indentar a la acci√≥n de colocar espacios o tabuladores antes del c√≥digo, para indicar si nos encontramos dentro de un if, de un bucle, etc... Esta pr√°ctica es muy importante y necesaria, y m√°s adelante profundizaremos en ella.

- __Variables:__ Es el nombre gen√©rico que se le da a peque√±os espacios de memoria donde guardas una informaci√≥n determinada, de forma muy similar a las inc√≥gnitas en matem√°ticas. Un programa puede tener muchas variables, y cada una de ellas tendr√° un nombre, un valor y un tipo de dato. El nombre se utiliza para diferenciarlas unas de otras y hacer referencia a ellas, el valor es la informaci√≥n que contienen y el tipo de dato es la naturaleza de ese valor. Se llaman variables porque podemos cambiarle su valor a lo largo del programa, seg√∫n necesitemos.

x = 5; // nombre: x, valor: 5, tipo de dato: n√∫mero
y = "Hola"; // nombre: y, valor: Hola, tipo de dato: texto
Manz = "me"; // nombre: Manz, valor: me, tipo de dato: texto
Constantes: Es el mismo concepto de una variable, salvo que en este caso, la informaci√≥n que contiene es siempre la misma (no puede variar).

- __Funciones:__ Cuando comenzamos a programar, nuestro c√≥digo se va haciendo cada vez m√°s y m√°s grande, por lo que hay que buscar formas de organizarlo y mantenerlo lo m√°s simple posible. Las funciones son agrupaciones de c√≥digo que, entre otras cosas, evitan que tengamos que escribir varias veces lo mismo en nuestro c√≥digo. Una funci√≥n contendr√° una o mas acciones a realizar y cada vez que ejecutemos una funci√≥n, se realizar√°n todas ellas.

- __Par√°metros__: Es el nombre que reciben las variables que se le pasan a las funciones. Muchas veces tambi√©n se les denomina argumentos.

- __Bucles__: Cuando estamos programando, muchas veces necesitaremos realizar tareas repetitivas. Una de las ventajas de la programaci√≥n es que permite automatizar acciones y no es necesario hacerlas varias veces. Los bucles permiten indicar el n√∫mero de veces que se repetir√° una acci√≥n. De esta forma, s√≥lo la escribimos una vez en nuestro c√≥digo, y simplemente indicamos el n√∫mero de veces que queremos que se repita.

- __Iteraci√≥n__: Cuando el programa est√° en un bucle repitiendo varias veces la misma tarea, cada una de esas repeticiones se denomina iteraci√≥n.

- __Librer√≠a__: Muchas veces, desarrollamos c√≥digo que resuelve tareas o problemas que, posteriormente, querremos reutilizar en otros programas. Cuando eso ocurre, en Javascript se suele empaquetar el c√≥digo en lo que se llaman librer√≠as, que no es m√°s que c√≥digo listo para que otros programadores puedan utilizarlo f√°cilmente en sus programas y beneficiarse de las tareas que resuelven de forma muy sencilla.

* * *

## ECMAScript: {#ecmascript}

ECMAScript es la especificaci√≥n donde se mencionan todos los detalles de c√≥mo debe funcionar y comportarse Javascript en un navegador. De esta forma, los diferentes navegadores (Chrome, Firefox, Opera, Edge, Safari...) saben como deben desarrollar los motores de Javascript para que cualquier c√≥digo o programa funcione exactamente igual, independientemente del navegador que se utilice.

ECMAScript suele venir acompa√±ado de un n√∫mero que indica la versi√≥n o revisi√≥n de la que hablamos (algo similar a las versiones de un programa). En cada nueva versi√≥n de ECMAScript, se modifican detalles sobre Javascript y/o se a√±aden nuevas funcionalidades, manteniendo Javascript vivo y con novedades que lo hacen un lenguaje de programaci√≥n moderno y cada vez mejor preparado para utilizar en el d√≠a a d√≠a.

Teniendo esto en cuenta, debemos saber que los navegadores web intentan cumplir la especificaci√≥n ECMAScript al m√°ximo nivel, pero no todos ellos lo consiguen. Por lo tanto, pueden existir ciertas discrepancias. Por ejemplo, pueden existir navegadores que cumplan la especificaci√≥n ECMAScript 6 al 80% y otros que s√≥lo la cumplan al 60%. Esto significa que pueden haber caracter√≠sticas que no funcionen en un navegador espec√≠fico (y en otros s√≠).

Adem√°s, todo esto va cambiando a medida que se van lanzando nuevas versiones de los navegadores web, donde su compatibilidad ECMAScript suele aumentar

El grupo encargador llevar el control de la especificaci√≥n ECMAScript es la [TEC39](https://github.com/tc39). en su p√°gina de github se encuentran los que vendra en el futuro y que metodos o funciones fueron descartadas y por que.

Esto es imporante de entender por que en los trabajos piden que semas javascritp usando ECMAScript 6. y es necesario saber un poco de esto. 

* * *

## Conceptos B√°sicos: {#conceptos-basicos}

### Tipos de cometarios: {#tipos-comentarios}

En Javascript existen dos tipos de comentarios: los comentarios de una sola l√≠nea y los comentarios de m√∫ltiples l√≠neas.

El primero de ellos se caracteriza porque comienza con `//` y s√≥lo comenta la linea actual desde donde se escribe.
El segundo tipo se utiliza para hacer comentarios extensos que ocupar√°n varias l√≠neas. Comienza por `/*` y comentar√° todo el texto que escribamos hasta que cerremos el comentario con un `*/`.

practicalo en RunJS: 

```javascript

// Comentarios cortos de una sola l√≠nea. Suelen explicar la l√≠nea siguiente.
var a = 1;

var x = 45; // Tambi√©n se utilizan al final de una l√≠nea.

/* Por otro lado, existen los comentarios m√∫ltiples de varias l√≠neas consecutivas.
   Suelen utilizarse para explicaciones largas que requieren bastante
   espacio porque se mencionan gran cantidad de cosas :-) */

```

> üí™ Escribiendo en RunJS linea por linea y observando el resultado del lado derecho, ¬ønotas la diferencia de codigo comentando y no comentando?.

¬øPero debo comentar todo? 

Comentar c√≥digo tambi√©n es un arte que debe ser aprendido, ya que al principio es muy f√°cil cometer errores y comentar en exceso o no ser concreto al comentar. No suele ser grave porque los comentarios no afectan al funcionamiento del programa, pero en equipos de trabajo donde hay varios programadores suele ser molesto para los programadores con m√°s experiencia.

por ejemplo:

```javascript
// Declaramos una variable llamada x
  var x = 50;
```

Estos comentarios pueden ser √∫tiles para el programador novato que comienza a programar y necesita recordar lo que hace porque a√∫n no conoce bien la sintaxis de programaci√≥n, de hecho muchos de los comentarios del tema de introducci√≥n son as√≠ (para ayudar al programador que reci√©n empieza a programar), pero el objetivo real de un comentario no debe ser recordar que hace una l√≠nea de c√≥digo, sino conocer porque lo estamos realizando o que representa lo que estamos haciendo:

```javascript
var x = 50; // Establecemos el precio del producto

console.log(x);

x = x * 0.5; // Lo rebajamos al 50%

```

Sin embargo, hay una opci√≥n todav√≠a mejor que conecta con uno de los temas que veremos m√°s adelante. Poner nombres descriptivos a las variables deber√≠a ser algo obligatorio a lo que acostumbrarnos, puesto que puede ahorrarnos muchos comentarios y tiempo, simplificar el c√≥digo considerablemente y hacerlo mucho m√°s legible y con menos ambig√ºedades:

  
```javascript
var precio = 50;

console.log(precio);

var oferta = precio * 0.5;

```

En este fragmento de c√≥digo, no utilizamos comentarios porque el nombre de las variables ya ayuda a entender el c√≥digo y lo hace autoexplicativo. De esta forma, generamos menos c√≥digo (e incluso comentarios) y se entiende igualmente. En los siguientes temas, veremos una serie de consejos a la hora de nombrar variables, funciones u otros elementos dentro de la programaci√≥n.

üìå __Nota__ hasta ahorita solo hemos visto comentarios, no es necesario hasta ahora que sepas que hacen las demas lineas de codigo. solo es necesario que sepas la sintaxis de comentarios, y que los comentarios son una forma de documentar tu c√≥digo.



## Fundamentos de Javascript {#fundamentos-de-javascript}

En Javascript disponemos de los siguientes tipos de datos:


| Tipo de dato | Descripci√≥n | Ejemplo b√°sico |
| ------------ | ------------ | -------------- |
| number | Valor num√©rico (enteros, decimales, etc...) | 42 |
| string | Valor de texto (cadenas de texto, car√°cteres, etc...) | 'MZ' |
| boolean | Valor booleano (valores verdadero o falso) | true |
| undefined | Valor sin definir (variable sin inicializar) | undefined |
| function | Funci√≥n (funci√≥n guardada en una variable) | function() {} |
| object | Objeto (estructura m√°s compleja) | {} |

Para empezar, nos centraremos en los tres primeros, denominados tipos de datos primitivos, y en los temas siguientes veremos detalles sobre los siguientes.

Para saber que tipo de dato tiene una variable, debemos observar que valor le hemos dado. Si es un valor num√©rico, ser√° de tipo number. Si es un valor de texto, ser√° de tipo string, si es verdadero o falso, ser√° de tipo booleano. Veamos un ejemplo en el que identificaremos que tipo de dato tiene cada variable:

  
```javascript

  var s = "Hola, me llamo Manz"; // s, de string
  var n = 42; // n, de n√∫mero
  var b = true; // b, de booleano
  var u; // u, de undefined

```

Como se puede ver, en este ejemplo, es muy sencillo saber que tipos de datos tienen cada variable.


### Utilizando typeof() {#utilizando-typeof}

Si tenemos dudas, podemos utilizar la funci√≥n typeof, que nos devuelve el tipo de dato de la variable que le pasemos por par√°metro. Veamos que nos devuelve typeof() sobre las variables del ejemplo anterior:

    
```javascript
  console.log(typeof s); // "string"
  console.log(typeof n); // "number"
  console.log(typeof b); // "boolean"
  console.log(typeof u); // "undefined

```

> üìå __Nota__: La funci√≥n typeof() solo sirve para variables con tipos de datos b√°sicos o primitivos.

### Declarando variables {#declarando-variables}

En los ejemplos anteriores de codigo Javascript, hemos utilizado la palabra reservada `var` para declarar variables. pero este tiene muchos errores y no es una buena pr√°ctica. actualmente En las versiones modernas de Javascript (ES6 o ECMAScript 2015) o posteriores, se introduce la palabra clave let en sustituci√≥n de var. Con ella, en lugar de utilizar los √°mbitos globales y a nivel de funci√≥n (var), utilizamos los √°mbitos cl√°sicos de programaci√≥n: √°mbito global y √°mbito local.
 
Siempre que sea posible se deber√≠a utilizar let y const (ver a continuaci√≥n), en lugar de var. Declarar variables mediante var se recomienda en fases de aprendizaje o en el caso de que se quiera mantener compatibilidad con navegadores muy antiguos utilizando ECMAScript 5, sin embargo, hay estrategias mejores a seguir que utilizar var en la actualidad.

apartir de este vamos a dejar de usar var y empezar a usar let y const.

> üìå __Nota:__ conforme vayamos avanzando en el curso, veremos c√≥mo utilizar let y const, no te preocupes por el momento. Tambi√©n, veremos que es esto de √°mbitos globales y locales


### Tipo de dato primitivo: numerica {#tipo-de-dato-primitivo-numerica}

En Javascript, los n√∫meros son uno de los tipos de datos b√°sicos (tipos primitivos) que para crearlos, simplemente basta con escribirlos. No obstante, en Javascript todo son objetos, como veremos m√°s adelante, y tambi√©n se pueden declarar como si fueran un objeto:

```javascript

// Literales
const n1 = 4;
const n2 = 15.8;

``` 

üìå __Nota:__ n1 es un n√∫mero un n√∫mero entero (integer) y n2 es un n√∫mero con decimales o un n√∫mero flotante (float).

Pero no todo es tan sencillo. En Javascript, podemos recibir un n√∫mero como un string, por ejemplo:


```javascript

// Literales
const ejemploInteger = "4";
const ejemploFloat = "15.8"'

``` 

üí™ __Ejercicio__: usa typeof para ver que tipo de dato es ejemploInteger y ejemploFloat del ejemplo anterior.


Este forma de recibir un n√∫mero como un string puede traer muchas complicaciones. en javascript, tenemos una serie de funciones que nos permiten convertir un string en un n√∫mero. pero antes veamos otro concepto. 


### Booleano {#booleano}

Un valor booleano es un valor que puede ser verdadero o falso de la siguiente forma:

```javascript 

  let b = true;
  let c = false;

```

estos tipos de variables nos servir√°n para definir condiciones, como si fuera un if o un switch que veremos mas adelante, en estructuras de control.

### String {#string}

Los  son tipos de datos primitivos, Para englobar los textos, se pueden utilizar comillas simples `'`, comillas dobles `"` o backticks ` (ver m√°s adelante).

> üìå __Nota__: Aunque es posible utilizar comillas simples o comillas dobles en los , se recomienda decantarse por uno de los dos estilos y no mezclarlos. Muchas empresas o equipos de desarrollo tienen gu√≠as de estilos para delimitar cu√°l utilizar.

```javascript
// Literales
let texto1 = "¬°Hola a todos!";
let texto2 = "Otro mensaje de texto";

```

Pero para las strings tenemos mas metodos que podemos utilizar:

  - `.length`: nos devuelve el n√∫mero de caracteres que tiene la string
  - `.charAt(index)`: nos devuelve el caracter que se encuentra en la posici√≥n indicada
  - `.indexOf(caracter)`: nos devuelve el √≠ndice del caracter indicado
  - `.lastIndexOf(caracter)`: nos devuelve el √≠ndice del caracter indicado, pero desde el final
  - `.slice(inicio, fin)`: nos devuelve una substring de la string, desde el √≠ndice inicio hasta el √≠ndice fin
  - `.substring(inicio, fin)`: nos devuelve una substring de la string, desde el √≠ndice inicio hasta el √≠ndice fin
  - `.split(separador)`: nos devuelve un array con las substrings que se separan por el separador indicado
  - `.replace(regex, nuevoValor)`: reemplaza todas las ocurrencias de una expresi√≥n regular por un valor nuevo
  - `.match(regex)`: devuelve un array con las coincidencias de una expresi√≥n regular
  - `.search(regex)`: devuelve el √≠ndice de la primera coincidencia de una expresi√≥n regular
  - `.trim()`: elimina los espacios en blanco al inicio y al final de la string
  - `.toUpperCase()`: convierte la string a may√∫sculas
  - `.toLowerCase()`: convierte la string a min√∫sculas
  - `.charCodeAt(index)`: devuelve el c√≥digo ASCII del caracter en la posici√≥n indicada
  - `.concat(string)`: concatena la string con otra string
  - `.includes(string)`: devuelve true si la string incluye la string indicada
  - `.startsWith(string)`: devuelve true si la string comienza con la string indicada
  - `.endsWith(string)`: devuelve true si la string termina con la string indicada

no te preocupes por el momento, veremos como utilizarlas mas adelante conforme aumentemos la dificultad de los ejercicios, por el momento solo te mostraremos los mas basicos.


### String.length {#string-length}

Veamos un ejemplo: 

```javascript

  let nombre = "Juan Pablo";
  console.log(nombre.length);

```

> ***Pruebalo en RunJS para ver el resultado***

Length es un metodo de la clase String que nos devuelve el numero de caracteres que tiene la string.


### String.split: {#string-split}

Veamos un ejemplo:
  
  ```javascript 
    let nombre = "Juan Pablo";
    console.log(nombre.split(" "));
  ```

  > ***Pruebalo en RunJS para ver el resultado***

  split es un metodo de la clase String que nos devuelve un array con las palabras que se separan por el separador indicado. en este caso el sapador es un espacio en blanco. `" "` comillas dobles siguidas de un espacio en blanco.
  (recuerda que es indistinto si utilizamos comillas simples o comillas dobles)

  > __üìå Nota:__ Aqui hay otro concepto que uan no hemos visto, el array, el array se define por medio de llaves `[]`. y sirve para guardar una lista de elementos. mas adelante veremos como utilizarlo.


### - String.lastIndexOf(caracter)`: {#array-lastIndexOf}

  Veamos un ejemplo:

  ```javascript 
    let nombre = "Juan Pablo";
    console.log(nombre.lastIndexOf("o"));
  ```

  Y un ejemplo mas:

  ```javascript 
    let nombre = "Juan Pablo";
    console.log(nombre.lastIndexOf("J"));
  ```

  > ***Pruebalo en RunJS para ver el resultado***
  
  lastIndexOf es un metodo de la clase String que nos devuelve el √≠ndice del caracter indicado, entendemos como el √≠ndice a la posici√≥n del caracter indicado, empezando desde cero. 

  Una de las curiosidades que tiene este metodo es que si no encuentra el caracter indicado, devuelve -1.

  > __üìå Nota:__ practica el ejercicio para ver como funciona el metodo lastIndexOf. y no tengas dudas 

  hasta aqui dejamos los ejercicios de strings, veamos ahora el siguiente tema.

## Concatenar strings {#concatenar-strings}

Existen 3 formas de concatenar strings: una que es las mas ineficiente, que usa el metodo concat, asi que de esta no hablaremos por que hay mejores formas de concatenar strings. 

Entiendas con contantenar con la forma de unir cadenas de texto.

veamos la primera forma de concatenar con el simbolo de `+`:

  ```javascript

    let nombre = "Juan Pablo";
    let apellido = "Gonzalez";
    let nombreCompleto = nombre + " " + apellido;
    console.log(nombreCompleto);

  ```

  > ***Pruebalo en RunJS para ver el resultado***

  Como puedes notar al usar el simbolo de `+` cuando concatenamos dos strings, el problema es que al contanar el string de nombre con el de apellido no inserta un espacio entre ellos (como deben de escribirse los nombres completos). 
  para esto que tenemos que utilizar el simbolo de `+` seguido de un espacio en blanco de definido dentro de las comillas dobles `" "` a√±adir otro simbolo de `+` y el string de apellido para poder formar el nombre completo.

  Este es un problema ya que si queremos concatenar varios strings, podemos utilizar la combinacion de simbolo de `+` espacio en blanco `" "` simbolo de `+` para concatenar todos los strings que queramos.

  Para esto tenemos una forma mas dificil de hacerlo, el template string.

  ```javascript
    let nombre = "Juan Pablo";
    let apellido = "Gonzalez";
    let nombreCompleto = `${nombre} ${apellido}`;
    console.log(nombreCompleto);
  ```

  > ***Pruebalo en RunJS para ver el resultado***

  El template estring es una forma mas "natura" de concatenar strings, es decir, que no necesita el simbolo de `+` para concatenar strings, pero si para poder concatenar varios strings como si estuvieramos escribiendo normalmente, solo que las variables deben de estar entre esta combinacion de caracateres `${}`. 

  > __üìå Nota:__ practica el ejercicio para ver como funciona el template string. y no tengas dudas

  Esta ultima es la forma mas moderna de concatenar strings y es la mas eficiente, por lo tanto es la que utilizaremos en el futuro.

  * * * 

 ## Comentarios Finales {#comentarios}

  Tal vez este tema ha sido bastante dif√≠cil para ti, pero no te preocupes, si los conceptos teoricos no quedan de todo claros con el tiempo y mucha practica estos temas empiezan a quedar mas claro. 

  Lo que si es importante es que tengas muy claro los tipos de datos, los metodos de string y concatenar strings por que es algo que vamos a necessitar mas adelante.

  Es importante que no tengas dudas con estos temas ya que esto es como una bola de nieve, se empieza a hacer mas y mas grande y tienes que aprender muchos conceptos, para que ya que tengas estos datos en la mente, sirvan como herramientas para poder resolver problemas relacionadas con codigo. 

  aun estamos lejos de ensamblar nuestas piezas html, css, javascript. pero quiero que tengas en mente que esto del desarrollo no es una carrera de velocidad si no de resistencia. es una carrera de fondo. no te desanimes y practica todos los dias. 


  Ahora para seguir con el siguiente tema, es importante que te pongas a prueba con los siguientes ejercicios:

  üèÜ __Ponte a prueba:__ investiga qui√©n y en cuantos dias se invento javascript.

  üèÜ __Ponte a prueba:__ 
  con los siguientes ejercicios. 

  Escribe tus propios ejemplos:

  Recuerdas la tabla de tipos de datos primitivos en javascript de la secci√≥n [Fundamentos de Javascript](#fundamentos-de-javascript).¬øPodrias hacer ejercicios con estos tipos de datos?.

  üèÜ __Ponte a prueba:__
  ¬øQue es una iteraci√≥n?

  manda todos tus ejercicios a carlos@devf.mx mucha suerte.
  Recuerda que mientras mas ejercicios tengas, mas probabilidades tienes de que te desarrolles en javascript.


  * * *

  FIN 
  REGRSAR. [REGRESAR AL TEMARIO](#temario)




  




